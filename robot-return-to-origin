class Solution:
    def judgeCircle(self, moves: str) -> bool:
        if len(moves)%2!=0:
            return False
        d={ "L":"R",
            "R":"L",
            "U":"D",
            "D":"U"}
        d1={}
        for i in range(len(moves)//2):
            move=moves[i]
            translated=d[move]
            if translated not in d1:
                d1[translated]=1
            else:
                d1[d[moves[i]]]+=1
        for i in range(len(moves)//2):
            index=len(moves)//2+i

            if moves[index] not in d1:
                return False
            else:
                d1[moves[index]]-=1
        for i in d1:
            if d1[i]>=1:
                return False
        return True


class Solution:
    def judgeCircle(self, moves: str) -> bool:
        dict = {"L": 0, "R": 0, "U": 0, "D": 0}
        for i in moves:
            if i in dict:
                dict[i] += 1
        if dict["L"] == dict["R"] and dict["U"] == dict["D"]:
            return True
        else:
            return False

a=Solution()
print(a.judgeCircle("UD"))# false
print(a.judgeCircle("LL"))# false
print(a.judgeCircle("RRDD"))# false
print(a.judgeCircle("LDRRLRUULR"))# false
print(a.judgeCircle("LLUDUDRR"))# True
print(a.judgeCircle("RLUURDDDLU"))# True
